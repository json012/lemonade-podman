# ~/.config/containers/systemd/lemonade.container
[Unit]
Description=Lemonade Server (llama.cpp Vulkan via uv)
Wants=network-online.target
After=network-online.target

# Vulkan needs the render node; ROCm/HIP would need /dev/kfd (not used here)
ConditionPathExists=/dev/dri/renderD128

[Container]
ContainerName=lemonade

# Uses published image by default. Change to `Image=localhost/lemonade:latest` for local image instead.
# Image=localhost/lemonade:latest
Image=ghcr.io/json012/lemonade:latest
Pull=newer

# Dynamic port mapping - uses %I parameter or defaults to 8000
PublishPort=8000:8000

# Persist model/cache
Volume=lemonade.volume:/home/ubuntu/.cache:Z
Network=lemonade.network

# Minimal device mapping for Vulkan
PodmanArgs=--device /dev/dri/renderD128

# Keep your UID/GID + supplemental groups (render,video) so device ACLs work
# Host user must be in groups render and user
UserNS=keep-id
GroupAdd=keep-groups

Environment=LEMONADE_LLAMACPP=vulkan
Environment=LEMONADE_HOST=0.0.0.0
Environment=LEMONADE_CACHE=/home/ubuntu/.cache

# Allow specifying model via instance parameter
# Usage: systemctl --user start lemonade@Qwen3-4B-GGUF.service
# %i = model name (e.g., "Qwen3-4B-GGUF")
# If no instance name is provided, the default CMD from Dockerfile will be used
Exec=/bin/bash -c 'if [ -n "%i" ]; then echo "Starting with model=%i"; uv run lemonade-server-dev run "%i" --llamacpp vulkan; else uv run lemonade-server-dev serve --llamacpp vulkan; fi'

# Health check
HealthCmd=curl -sf http://localhost:8000/api/v1/health || exit 1
HealthInterval=30s
HealthTimeout=5s
HealthStartPeriod=15s

[Service]
Restart=always

[Install]
WantedBy=default.target
